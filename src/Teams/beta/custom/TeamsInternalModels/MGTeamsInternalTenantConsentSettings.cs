// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.Beta.PowerShell.Models.TeamsInternal
{
    using System;
    using System.Linq;
    using static Microsoft.Graph.Beta.PowerShell.Runtime.Extensions;

    /// <summary>
    /// Teams internal model for Tenant Consent Settings.
    /// </summary>
    internal class MGTeamsInternalTenantConsentSettings
    {
        /// <summary>
        /// The Id.
        /// </summary>
        internal string Id { get; private set; }

        /// <summary>
        /// The template Id.
        /// </summary>
        internal string TemplateId { get; private set; }

        /// <summary>
        /// Setting values.
        /// </summary>
        internal MGTeamsInternalTenantConsentSettingValue[] Values { get; private set; }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode"/> into an instance of MGTeamsInternalTenantConsentSettings.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of MGTeamsInternalSensitivityLabel.</returns>
        internal static MGTeamsInternalTenantConsentSettings FromJson(Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject json)
        {
            return new MGTeamsInternalTenantConsentSettings(json);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MGTeamsInternalTenantConsentSettings"/> class.
        /// </summary>
        internal MGTeamsInternalTenantConsentSettings(
            string templateId,
            MGTeamsInternalTenantConsentSettingValue[] consentSettingValues)
        {
            this.SetProperties(null, templateId, consentSettingValues);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MGTeamsInternalTenantConsentSettings"/> class.
        /// </summary>
        internal MGTeamsInternalTenantConsentSettings(Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject json)
        {
            string id = If(json.PropertyT<Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonString>("id"), out var jsonId)
                ? (string)jsonId
                : null;

            string templateId = If(json.PropertyT<Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonString>("templateId"), out var jsonTemplateId)
                ? (string)jsonTemplateId
                : null;

            MGTeamsInternalTenantConsentSettingValue[] values = If(json.PropertyT<Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonArray>("values"), out var jsonValues)
                ? jsonValues
                    .Where(j => j is Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject)
                    .Select(j => MGTeamsInternalTenantConsentSettingValue.FromJson((Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject)j))
                    .ToArray()
                : Array.Empty<MGTeamsInternalTenantConsentSettingValue>();

            this.SetProperties(id, templateId, values);
        }

        /// <summary>
        /// Initialize properties of this object.
        /// </summary>
        /// <param name="id">The Id.</param>
        /// <param name="templateId">The template Id.</param>
        private void SetProperties(string id, string templateId, MGTeamsInternalTenantConsentSettingValue[] values)
        {
            this.Id = id;
            this.TemplateId = templateId;
            this.Values = values;
        }

        /// <summary>
        /// Serialize this instance to a JsonNode.
        /// </summary>
        /// <returns>Json Node.</returns>
        internal Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode ToJson()
        {
            Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject jsonObject = new Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject();

            if (this.TemplateId != null)
            {
                jsonObject.Add(
                    "templateId",
                    (Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode)new Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonString(this.TemplateId));
            }

            if (this.Values != null)
            {
                var valuesJson = new Microsoft.Graph.Beta.PowerShell.Runtime.Json.XNodeArray();
                foreach (var value in this.Values)
                {
                    if (value != null)
                    {
                        valuesJson.Add(value.ToJson());
                    }
                }

                jsonObject.Add("values", valuesJson);
            }

            return jsonObject;
        }
    }
}