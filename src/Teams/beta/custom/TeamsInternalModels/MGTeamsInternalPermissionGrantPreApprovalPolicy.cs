// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.Beta.PowerShell.Models.TeamsInternal
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using static Microsoft.Graph.Beta.PowerShell.Runtime.Extensions;

    /// <summary>
    /// Teams internal model a preapproval policy.
    /// </summary>
    internal class MGTeamsInternalPermissionGrantPreApprovalPolicy
    {
        /// <summary>
        /// The Id of the policy
        /// </summary>
        internal string Id { get; set; }

        /// <summary>
        /// Conditions in the policy.
        /// </summary>
        internal IEnumerable<MGTeamsInternalPreapprovalDetail> Conditions { get; set; }

        /// <summary>
        /// Deserializes a <see cref="Runtime.Json.JsonNode"/> into an instance of MGTeamsInternalPermissionGrantPreApprovalPolicy.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of Microsoft.Graph.Beta.PowerShell.Models.IMicrosoftGraphTeamsApp.</returns>
        internal static MGTeamsInternalPermissionGrantPreApprovalPolicy FromJson(Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode json)
        {
            Runtime.Json.JsonObject jsonObject = json as Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject;
            return jsonObject == null
                ? null
                : new MGTeamsInternalPermissionGrantPreApprovalPolicy(jsonObject);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MGTeamsInternalPermissionGrantPreApprovalPolicy"/> class.
        /// </summary>
        internal MGTeamsInternalPermissionGrantPreApprovalPolicy(Runtime.Json.JsonObject json)
        {
            string id = If(json.PropertyT<Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonString>("id"), out var jsonId)
                ? (string)jsonId
                : null;

            IEnumerable<MGTeamsInternalPreapprovalDetail> conditions = If(json.PropertyT<Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonArray>("conditions"), out var jsonConditions)
                ? jsonConditions
                    .Where(j => j is Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject)
                    .Select(j => MGTeamsInternalPreapprovalDetail.FromJson((Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject)j))
                    .ToArray()
                : Array.Empty<MGTeamsInternalPreapprovalDetail>();

            this.SetProperties(id, conditions);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MGTeamsInternalPermissionGrantPreApprovalPolicy"/> class.
        /// </summary>
        internal MGTeamsInternalPermissionGrantPreApprovalPolicy(IEnumerable<MGTeamsInternalPreapprovalDetail> conditions)
        {
            this.SetProperties(id: null, conditions: conditions);
        }

        /// <summary>
        /// Initialize properties of this object.
        /// </summary>
        private void SetProperties(string id, IEnumerable<MGTeamsInternalPreapprovalDetail> conditions)
        {
            this.Id = id;
            this.Conditions = conditions;
        }

        /// <summary>
        /// Serialize this instance to a JsonNode.
        /// </summary>
        /// <returns>Json Node.</returns>
        public Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode ToJson()
        {
            Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject jsonObject = new Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonObject();

            if (this.Id!= null)
            {
                jsonObject.Add("id", (Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonNode)new Microsoft.Graph.Beta.PowerShell.Runtime.Json.JsonString(this.Id));
            }

            if (this.Conditions != null)
            {
                var conditionsJson = new Microsoft.Graph.Beta.PowerShell.Runtime.Json.XNodeArray();
                foreach (var singleCondition in this.Conditions)
                {
                    if (singleCondition != null)
                    {
                        conditionsJson.Add(singleCondition.ToJson());
                    }
                }

                jsonObject.Add("conditions", conditionsJson);
            }

            return jsonObject;
        }
    }
}