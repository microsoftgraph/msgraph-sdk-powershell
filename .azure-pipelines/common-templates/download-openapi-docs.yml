# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
  - name: Branch
    type: string
  - name: BaseBranch
    type: string
  - name: BuildAgent
    displayName: Build Agent
  - name: SkipForceRefresh
    type: string
  - name: SkipOpenAPIDocsDownload
    type: boolean
    default: false

steps:
  - template: ./checkout.yml
    parameters:
      TargetBranch: ${{ parameters.BaseBranch }}

  - template: ./install-tools.yml

  - task: PowerShell@2
    name: "ComputeBranch"
    displayName: "Compute weekly branch name"
    inputs:
      targetType: inline
      script: |
        $branch = "{0}/{1}" -f "$(Branch)", (Get-Date -Format yyyyMMddHHmm)
        Write-Host "##vso[task.setvariable variable=WeeklyBranch;isOutput=true]$branch"

  - task: Bash@3
    displayName: "Create weekly branch"
    inputs:
      targetType: inline
      script: |
        git status
        git branch $(ComputeBranch.WeeklyBranch)
        git checkout $(ComputeBranch.WeeklyBranch)
        git status

  - task: PowerShell@2
    displayName: Download v1.0 OpenApi docs
    condition: and(succeeded(), eq('${{ parameters.SkipOpenAPIDocsDownload }}', false))
    continueOnError: false
    inputs:
      filePath: "$(System.DefaultWorkingDirectory)/tools/UpdateOpenApi.ps1"
      arguments: -SkipForceRefresh:$$(SkipForceRefresh)
      pwsh: true

  - task: PowerShell@2
    displayName: Download beta OpenApi docs
    condition: and(succeeded(), eq('${{ parameters.SkipOpenAPIDocsDownload }}', false))
    continueOnError: false
    inputs:
      filePath: "$(System.DefaultWorkingDirectory)/tools/UpdateOpenApi.ps1"
      arguments: -BetaGraphVersion -SkipForceRefresh:$$(SkipForceRefresh)
      pwsh: true

  - task: PowerShell@2
    name: OpenAPIDocDiff
    displayName: Get OpenAPI docs diff
    inputs:
      pwsh: true
      targetType: "inline"
      script: |
        Write-Host "SkipOpenAPIDocsDownload: ${{ parameters.SkipOpenAPIDocsDownload }}"
        if ('${{ parameters.SkipOpenAPIDocsDownload }}' -eq 'True') {
          $ModuleNames = "Skipped"
          Write-Warning "Skipped OpenAPI Docs Download."
        } else  {
          $diff = git diff --name-only
          $ModulesWithChanges = @{}
          $diff | %{
            if (($_ -match 'openApiDocs\/(v1.0|beta)\/(.*).yml') -and !$ModulesWithChanges.ContainsKey($matches.2))
            {
              $ModulesWithChanges.Add($matches.2, $matches.1)
            }
          }
          $ModuleNames = $ModulesWithChanges.Keys
        }
        Write-Host "##vso[task.setvariable variable=ModulesWithChanges;isOutput=true]$ModuleNames"

  - task: PowerShell@2
    name: CalculateAndBumpModuleVersion
    displayName: Calculate and bump module version
    condition: and(succeeded(), ne(variables['OpenAPIDocDiff.ModulesWithChanges'], ''))
    inputs:
      pwsh: true
      targetType: inline
      script: |
        . "$(System.DefaultWorkingDirectory)\tools\Versions\BumpModuleVersion.ps1" -BumpV1Module -BumpBetaModule -BumpAuthModule -Debug

  - task: Bash@3
    displayName: Commit downloaded files
    condition: and(succeeded(), ne(variables['OpenAPIDocDiff.ModulesWithChanges'], ''))
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
    inputs:
      targetType: inline
      script: |
        git status
        git add .
        git commit -m 'Weekly OpenApiDocs Download.'
        git status
        git push --set-upstream "https://$(GITHUB_TOKEN)@github.com/microsoftgraph/msgraph-sdk-powershell.git" $(ComputeBranch.WeeklyBranch)
        git status

# References
# [0] https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables
# [1] https://hub.github.com/hub-pull-request.1.html
# https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token
